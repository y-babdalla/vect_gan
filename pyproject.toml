[tool.ruff]
target-version = "py311"
cache-dir = "./.cache/ruff"  # for consistency with other tools
# https://docs.astral.sh/ruff/configuration/#python-file-discovery
# see default include/exclude patters:
# https://docs.astral.sh/ruff/settings/#include
extend-exclude = [".*/*.py"]
line-length = 99
indent-width = 4
# the below will automatically exclude files that are ignored by .gitignore
# https://docs.astral.sh/ruff/settings/#respect-gitignore
respect-gitignore = true

[tool.ruff.lint]
extend-select = [
    "A", # flake8-builtin
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B", # flake8-bugbear
    "C901", # mccabe-complexity
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "LOG", # flake8-logging
    "N", # pep8-naming
    "NPY", # NumPy rules
    "PD", # pandas-vet
    "PL", # pylint
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff rules
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle
]

# see conflicting lint/format rules:
# https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
# see all rules: https://docs.astral.sh/ruff/rules/
ignore = [
    "W191", # conflicting
    "E111", # conflicting
    "E114", # conflicting
    "E117", # conflicting
    "D206", # conflicting
    "D300", # conflicting
    "W391", # see issue with vim https://github.com/PyCQA/pycodestyle/issues/365
    "D105", # pydocstyle: missing docstring in magic method
    "D107", # pydocstyle: missing docstring in __init__
    "D417", # pydocstyle: documentation for every function parameter
    "N805", # pep8-naming: so that st.cache_data is able to ignore `self`
    "PD901", # pandas-vet: Avoid using the generic variable name df for DataFrames
    "RUF001", # Ruff: String contains ambiguous {}. Did you mean {}?
    "RUF100", # Ruff: Unused noqa directive
    "ANN204", # flake8-annotations: Missing return type annotation for special method
    "ANN401", # flake8-annotations: Allow typing.Any
    "PYI041", # Use float instead of int | float
    "PLR2004", # pylint: allow using numeric literals.
    "PLR0913", # pylint: too-many-arguments
    "PLR0915", # pylint: too-many-statements
    "PLR0402", # pylint: to allow `import google.cloud.storage as storage` for mypy
    "G004", # flake8-logging-format: Logging statement uses string formatting
    "PLW0603", # pylint: Using the global statement
    "B023",
    "NPY002", # NumPy: Use of np.float64 is discouraged. Use float instead.
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
docstring-code-line-length = "dynamic"
line-ending = "auto"
skip-magic-trailing-comma = true
exclude = ["joblib"]

[tool.ruff.lint.pydocstyle]
# https://docs.astral.sh/ruff/settings/#lintpydocstyle
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Disable pydocstyle rules for test_*.py files
"tests/**/*.py" = ["D100", "D102", "D103", "B018"]
"__init__.py" = ["D104", "F401"]

[tool.ruff.lint.pep8-naming]
# https://docs.astral.sh/ruff/settings/#lintpep8-naming
classmethod-decorators = [
    "pydantic.validator",
    "declared_attr",
    "expression",
    "comparator",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
# settings: https://docs.astral.sh/ruff/settings/#lintisort
# avoid these settings: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
known-third-party = ["joblib"]
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
# https://docs.astral.sh/ruff/settings/#lint_mccabe_max-complexity
max-complexity = 10

[tool.mypy]
python_version = "3.11"
cache_dir = "./.cache/mypy"  # for consistency with other tools
# ignore venvs
exclude = "^(venv|.venv|venv_.*|.*_venv|env|.env|.*_env|virtualenv|.*_virtualenv)/"
# mypy uses a cache to speed up checking
incremental = true
# mypy will error if a config is set but not necessary
warn_unused_configs = true
# mypy will error if ignore comment is use on non-erroring line
warn_unused_ignores = false
# mypy will check the body of defs even if they don't have type sig
check_untyped_defs = true
# mypy will error if an unnecessary cast is used
warn_redundant_casts = true
# setting default arg to None still requires `Optional`
no_implicit_optional = true
# mypy checks the use of None values
strict_optional = true
# mypy ignores if an import can't be found, this is necessary for not throwing errors
# when importing external (3rd party) modules
ignore_missing_imports = true
# mypy follows and checks imported modules, gives more coverage
follow_imports = "normal"
# mypy follows and checks imported modules even without __init__.py
# WARN: this will still miss non-imported modules like test files with __init__.py!
namespace_packages = true
# mypy prepends errors with the corresponding error code
show_error_codes = true
# Python 3.12 generics syntax, will become default in > 1.12 mypy
enable_incomplete_feature = "NewGenericSyntax"

[[tool.mypy.overrides]]
module = "joblib"
ignore_errors = true

# Technically, these should have already been ignored by `exclude` above
[[tool.mypy.overrides]]
module = "site-packages.*"
ignore_errors = true

[tool.pytest.ini_options]
cache_dir = "./.cache/pytest"  # for consistency with other tools
